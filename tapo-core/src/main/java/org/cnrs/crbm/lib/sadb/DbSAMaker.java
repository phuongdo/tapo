package org.cnrs.crbm.lib.sadb;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Set;

import org.cnrs.crbm.lib.conf.Dir;
import org.cnrs.crbm.lib.io.ReadFasta;
import org.cnrs.crbm.lib.utils.ProgressBar;

/**
 * 
 * Create a database of structural alphabet database.
 * 
 * @author pdoviet
 *
 */
public class DbSAMaker {

	public static void main(String[] args) {

		DbSAMaker dbSAMaker = new DbSAMaker();

		try {
			dbSAMaker.generateDB();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void generateDB() throws FileNotFoundException {

		// read all non-redundancy pdb generated by CDHIT

		ReadFasta readFasta = new ReadFasta();

		// run new version of dssp binary
		ProgressBar bar = new ProgressBar();
		System.out.println(Dir.FASTA_LOCAL + "\n");

		try {
			PrintWriter writer = new PrintWriter(Dir.SADB_LOCAL + "/sadb");

			// read pdbs from none redundancy db
			Set<String> pdbs = readFasta.getAllPdbsWithChain(Dir.FASTA_LOCAL
					+ "/pdb_seqres.nrdb");

			Sequence3D sequence3D = new Sequence3D();
			System.out.println("Process Starts Now!");
			bar.update(0, pdbs.size());
			int i = 0;
			for (String pdb : pdbs) {

				String pdbCode = pdb.substring(0, 4);
				String pdbChain = pdb.substring(5, 6);
				String record = sequence3D.getSARecord(pdbCode, pdbChain);
				// write a record to file, append to file
				if (!record.equals(""))
					writer.append(record);
				// update a status bar
				bar.update(i, pdbs.size());
				i++;
			}

			writer.close();
			System.out.println("Process Completed!");

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
